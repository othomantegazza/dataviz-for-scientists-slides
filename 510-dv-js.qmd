---
title: "Data Visualization in Javascript"
subtitle: "Build visualizations in the reader's device"
author: "Otho Mantegazza _ Dataviz for Scientists _ Part 5.1"
editor_options: 
  chunk_output_type: console
---

## 

This is not a comprehensive introduction to data visualization in javascript, it's just for breaking the ice.

## Javascript

::: {.column width="80%"}

Javascirpt (JS) Was developed as a programming language to run directly in the browser.

- It was released in 1995 by Brendan Eich,
- Javascript latest version is ECMAScript 6, abbreviated as ES6.
- Besides the name, it has nothing to do with Java.

Today javascript can run both in the browser (client side or front end), or independently from the browser, such as R (server side or back end).

:::

## Javascript

::: {.column width="80%"}

Javascript is what makes things happen on web pages, and in many apps. It is a very widely used programming language.

:::

## Try JS

::: {.column width="80%"}

You can try JS by opening the [browser console](https://firefox-source-docs.mozilla.org/devtools-user/). 

But most of the time it is easier to try it in dedicated tools, such as:

- [Codepen](https://codepen.io/).
- [https://jsfiddle.net/](JS Fiddle)

Otherwise you can also install JS locally with [node.js](https://nodejs.org/en).

:::

## Assignments

::: {.column width="80%"}

You can define variable with: **var**, **let** or **const**; and assign values to them with **=**. **var** can be reassigned, **let** and **const** are constants and cannot be reassigned.

```js
var a = "some text"
let b = "more text"
const c = "something else"
```

Check what's stored in a variable with **console.log()**.

```js
console.log(a)
```
:::

## Basic operations

In JS you can run all fundamental arithmetic operations.

The plus sign can also be used to concatenate strings.

```js
"Hello" + " " + "world" + "!"
```

## Control Flow

### Loops

```js
let arr = [1, 2, "hi!"]
for (index in arr) {
  console.log("value", arr[index], "detected at postion", index)
}
```

<br>

### If Else

```js
let a = 3
if (a === 3) {
  console.log('a is equal to', a)
} else {
  console.log('nope')
}
```

## Data structures

The most used data structures are **arrays** and **objects**.


## Arrays

::: {.column width="80%"}

Arrays are series of values between square brackets **[...]**.

```js
let arr = [1, 2, "hi!"]
let arr2 = [
  1,
  [1, 3, "r", 1],
  arr
  ]
```

An array can contain any data type, and it is ordered. Any item can be accessed by index and can be iterated upon. 

:::

## Objects

::: {.column width="80%"}

Objects are collections of key-value pairs.

```js
let cities = {
    "Rome": {
    "pop": 2.761,
  },
  "Milan": {
    "pop": 1.352,
  },
  "Naples": {
    "pop": 0.914,
  },
}
```

They can contain any data type. Any item can be accessed by key, and they can be iterated upon.

:::

## Objects and Arrays

Javascript objects can contain arrays and vice versa:

```js
const pop = [
  {
    "town": "Rome",
    "pop": 2.761,
  },
  {
    "town": "Milan",
    "pop": 1.352,
  },
  {
    "town": "Naples",
    "pop": 0.914,
  },
]
```

## JSON

::: {.column width="80%"}

The combination of objects and array notation is known as JSON, or JavaScript Object Notation. 

```json
[
  {
    "town": "Rome",
    "pop": 2.761,
  },
  {
    "town": "Milan",
    "pop": 1.352,
  },
  {
    "town": "Naples",
    "pop": 0.914,
  },
]
```

JSON files store data in plain text, such as CSV.

:::

## Dataviz in the browser.

::: {.column width="80%"}

Through HTML and CSS, the browser is one of the most sophisticated graphical tools available.

With JS, you can program in the browser, meaning that you can load data, and map the data to graphical elements in the browser.

Put the two pieces together, and you have an incredible tool for data visualization.

:::

## CSS 

```
h1 {
  color: Black;
}

.bar {
  background: #0373fc;
  background-clip: content-box;
  box-shadow: inset 0 0 0 5px #7f94ad;
  display: block;
  height: 20px;
  padding: 5px;
  border-radius: 3px;
  transition: width 0.5s cubic-bezier(1, 0.01, 0, 1);
}
```

## JS

```
const pop = [
  {
    "town": "Rome",
    "pop": 2.761,
  },
  {
    "town": "Milan",
    "pop": 1.352,
  },
  {
    "town": "Naples",
    "pop": 0.914,
  },
]

var tbl = document.getElementById("pop")

pop.forEach((town) => {
	 let html = `<tr>
   								<td>${town.town}</td>
                  <td class="bar" style="width:${town.pop*100}px;"></td>
                </tr>`
   console.log(town)
   tbl.insertAdjacentHTML( 'beforeend', html )
  }) 
```

## HTML 

```
<h1>Population</h1>
  
<table>
<tbody id="pop">
  
</tbody>
</table>
```
