---
title: "Use Data in R"
subtitle: "Quick and intuitive code to turn your data inside out."
author: "Otho Mantegazza _ Dataviz for Scientists _ Part 1.2"
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(dplyr)
library(magrittr)
library(tidyr)
library(palmerpenguins)
library(tibble)
library(skimr)
```


## Intro to the Tidyverse

::: {.column width="70%"}

The [Tidyverse](https://www.tidyverse.org) is an ecosystem of packages for Data Science

All the packages share a common design:

  - One function does one thing, well.
  - Designed for pipes.
  - Extensive user-friendly documentation.
  - Non-standard evaluation, to write code quickly and easily.

All packages can be loaded with **library(tidyverse)**, but you can also load [single packages](https://www.tidyverse.org/packages/) one by one.

:::

## {background-image="https://upload.wikimedia.org/wikipedia/commons/a/a3/Gentoo_Penguin_AdF.jpg"}

::: {.absolute top=160}

[Data: Palmer Penguins]{style="font-size:70px"}

:::small
Photo credits: Arturo de Frias Marques
:::

:::

## {background-image="https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png" background-position='center' background-size='contain'}

::: {.absolute top=630}

Package and Drawings:<br>[Allison Horst](https://allisonhorst.com/)

:::

## A great dataset for teaching

::: {.column width="70%"}

The [Penguins Dataset](https://allisonhorst.github.io/palmerpenguins/) stores real data about palmer penguins. This R data package was developed and is maintained by Allison Horst, Alison Hill and Kirsten Gorman for teaching purposes.

:::

Let's install the package...

```{r}
#| eval: false
install.packages('palmerpenguins')
```

...and load it in R.

```{r}
library(palmerpenguins)
```

## Penguins

The Palmer Penguins package exports two datasets:

```{r}
penguins
```


## Penguins

The Palmer Penguins package exports two datasets:

```{r}
penguins_raw
```

## Penguins

::: {.column width="70%"}

We will use the first one: **penguins**, which has already been cleaned.

:::

## Exercise

::: {.column width="70%"}

The print method for a tibble gives you a reasonable overview of the data stored in it.

Can you get more details with the package [skimr](https://docs.ropensci.org/skimr/)?

Check its documentation, install it, try it out on the penguins dataset. Comment on the output: is it useful, how?

:::

## Tools: dplyr

:::: {.columns}

::: {.column width="60%"}

[Dplyr](https://dplyr.tidyverse.org/) provides a grammar for manipulating data, with many useful verbs:

- **mutate()** adds new variables that are functions of existing variables
- **select()** picks variables based on their names.
- **filter()** picks cases based on their values.
- **summarise()** reduces multiple values down to a single summary.
- **group_by()** performs operations by group.

:::

::: {.column width="35%"}
![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/SVG/dplyr.svg)
:::


::::

## Use dplyr {auto-animate="true"}

```{r}
penguins %>%
  mutate(bill_length_meters = bill_length_mm/1000)
```


## Use dplyr {auto-animate="true"}

```{r}
penguins %>%
  select(bill_length_mm) %>% 
  mutate(bill_length_meters = bill_length_mm/1000)
```

## Use dplyr {auto-animate="true"}

```{r}
penguins %>%
  select(species, island, bill_length_mm) %>% 
  mutate(bill_length_meters = bill_length_mm/1000)
```

## Use dplyr {auto-animate="true"}

```{r}
penguins %>%
 count(island)
```

## Use dplyr {auto-animate="true"}

```{r}
penguins %>%
  select(species, island, bill_length_mm) %>% 
  filter(island == 'Dream') %>% 
  mutate(bill_length_meters = bill_length_mm/1000)
```

## Use dplyr {auto-animate="true"}

```{r}
penguins %>%
  select(species, island, bill_length_mm) %>% 
  filter(island == 'Dream') %>% 
  mutate(bill_length_meters = bill_length_mm/1000) %>% 
  group_by(species)
```

## Use dplyr {auto-animate="true"}

```{r}
penguins %>%
  select(species, island, bill_length_mm) %>% 
  filter(island == 'Dream') %>% 
  mutate(bill_length_meters = bill_length_mm/1000) %>% 
  group_by(species) %>% 
  summarise(mean_bill_length_mm = mean(bill_length_mm),
            sd_bill_length_mm = sd(bill_length_mm))
```


## Use dplyr {auto-animate="true"}

```{r}
dream_summary <- 
  penguins %>%
  select(species, island, bill_length_mm) %>% 
  filter(island == 'Dream') %>% 
  mutate(bill_length_meters = bill_length_mm/1000) %>% 
  group_by(species) %>% 
  summarise(mean_bill_length_mm = mean(bill_length_mm),
            sd_bill_length_mm = sd(bill_length_mm))
```

Let's assign the output to a new variable **dream_summary**.

##

In the previous code we have seen also two additional aspects that feature heavily in the tidyverse:

- The Pipe **%>%**.
- Non-Standard Evaluation.

## The Pipe %>%

:::: {.columns}

::: {.column width="35%"}
![](https://raw.githubusercontent.com/rstudio/hex-stickers/master/SVG/pipe.svg)
:::

::: {.column width="60%"}

The pipe is provided by the package [magrittr](https://magrittr.tidyverse.org/); it is a forwarding operator:

The pipe operator takes the output of what comes before (LHS) and sends it to the first argument of the function that comes after (RHS).

[LHS %>% RHS]{.big}

:::

::::

## The Pipe %>%

For example, you could write:

```{r}
#| output-location: column
select(penguins,
       species, body_mass_g)
```

## The Pipe %>%

...but if you use the pipe, your code is easier to read...

```{r}
#| output-location: column
penguins %>%
  select(species, body_mass_g)
```

## The Pipe %>%

...especially if you have to perform many operations one after the other...

```{r}
#| output-location: column
penguins %>%
  select(species, body_mass_g) %>% 
  filter(species == 'Adelie')
```

## The Pipe %>%

...that otherwise would force you to nest your code horribly.

```{r}
#| output-location: column
filter(
  select(
    penguins,
    species, body_mass_g
  ),
  species == 'Adelie'
)

```

## Non-Standard Evaluation

This one is difficult...

## Non-Standard Evaluation

::: {.column width="70%"}

Which argument does the function **select()** take? 

Let's open its help page by typing **?select** at the R console, or by opening it s [online help page at https://dplyr.tidyverse.org/reference/select.html](https://dplyr.tidyverse.org/reference/select.html).

```{r}
?select
```

Under the **Usage** section, the help page says:

```
select(.data, ...)
```

But what can we write in the *...* argument?

:::

## Non-Standard Evaluation

::: {.column width="70%"}

In the **Arguments** section the help page explains:

```
.data: A data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.

...: <tidy-select> One or more unquoted expressions separated by commas. Variable names can be used as if they were positions in the data frame, so expressions like x:y can be used to select a range of variables.
```

:::

## Non-Standard Evaluation

::: {.column width="70%"}

So, what do we mean if we write:

```{r}
#| eval: false
penguins %>% 
  select(species, island)
```

. . .

The **penguins** tibble fills the **.data** parameter through the pipe **%>%**.

The unquoted names **species, island** fill the argument **...**, they represent the names of the columns to be selected.

:::

## Non-Standard Evaluation

::: {.column width="70%"}

But the name of columns in a tibble is a character vector.

```{r}
colnames(penguins)
```

:::

## Non-Standard Evaluation

::: {.column width="70%"}

Through non-standard evaluation, we can call element of a character vector like if they were variables (without quoting them).

```{r}
#| eval: false
penguins %>% 
  select(species, island)
```

Even if the variables **species** and **island** don't exist outside of the dplyr function **select()**.

```{r}
#| error: true
species
```

:::

## Non-Standard Evaluation

::: {.column width="70%"}

With non-standard evaluation we can write names without quoting them. This makes writing code for iterative data exploration faster.

If you come from a more strict programming language, it could be hard to get use to this behavior.

Most function of the Tidyverse do non-standard evaluation.

:::

## Exercise

::: {.column width="70%"}

With the penguin dataset:

- Select all **numeric** variables (columns).

- Convert all variables that are expressed in **millimeters** into **meters**, rename them accordingly.

Get help from:

- [Dplyr's website](https://dplyr.tidyverse.org/).
- The [Data Transformation Chapter](https://r4ds.hadley.nz/data-transform) of R4DS.

:::

## Exercise

::: {.column width="70%"}

How many penguins have **bill_length_mm** above average?

Repeat the analysis for each species.

:::

