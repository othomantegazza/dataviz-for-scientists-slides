---
title: "Better Graphs - I"
subtitle: "How to use graphical variables effectively."
author: "Otho Mantegazza"
editor_options:  
  chunk_output_type: console
knitr:
  opts_chunk: 
    dev: jpeg
---

##

![](img/1967-bertin-retinal-variables.png){.absolute top=0 left=0 width="1000"}

::: {.caption .absolute left=760 top=340}

AUTHOR: Jaques Bertin

YEAR: 1967

BOOK: The Semiology of Graphics

*Examples of planar and retinal variables.*

:::

## Graphical Variables

::: {.columns}

::: {.column width="45%"}

When you draw a data visualization on a two dimensional screen, you map values from data variables to graphical variables:

- Planar Variables: *x, y*.
- Retinal Variables: *colour hue, color value, shape, orientation, size, area, texture*.

In terms of the grammar of graphics, the graphical variables are the aesthetics that you map yor data to.

:::

:::

## Planar Variables

::: {.columns}

::: {.column width="45%"}

The x and y planar variables are largely perceived as a quantitative linear space. And they are great for representing **quantitative** and **qualitative** data.

The planar variables are the x and y coordinates on your planar screen, which readily translate to the x and y positions in your graph.

(f you use cartesian coordinates or to a transformed version of them if you use more elaborate coordinate systems)

```{r}
#| include: false

library(tidyverse)

theme_set(
  theme_minimal(
    base_size = 30,
  ) +
  theme(
    plot.margin = margin(20,5,5,5),
    axis.text.x = element_text(hjust = 0),
    axis.text.y = element_text(vjust = 0),
    axis.ticks = element_line(),
    axis.title = element_blank(),
    axis.line = element_line(),
    legend.position = "bottom"
  )
)
```


```{r}
#| eval: false
#| include: false
diamonds %>%
  ggplot() +
  aes(x = carat,
      y = price) +
  geom_point(alpha = .05) +
  geom_smooth() +
  scale_x_continuous(expand = expansion(0, 0),
                     limits = c(.2, .75)) +
  scale_y_continuous(expand = expansion(0, 0),
                     limits = c(0, 2500)) 

ggsave(filename = 'img/planar-variables-raw.png',
       width = 10,
       height = 10)
```

![](img/planar-variables.png){.absolute top=50 left=500}

:::

:::

## Planar Variables

::: {.columns}

::: {.column width="45%"}

You can place **qualitative** variables both in the x and y variable. In this case the x might stop being the independent variable, and the y stops being the response.

Often there is no clear hypothetical relationship of cause effect between two variables, in that case you can invert the x and the y freely.

:::

:::

![](img/planar-variables-categorical.png){.absolute top=50 left=500 width=650}

```{r}
#| include: false
#| eval: false
diamonds %>%
    mutate(cut = fct_reorder(.f = cut, .x = carat)) %>% 
  ggplot() +
  aes(x = carat,
      y = cut) +
  geom_boxplot(size = 1.5) +
  scale_x_continuous(position = "top") 

ggsave(filename = 'img/planar-variables-categorical-raw.png',
       width = 10,
       height = 7)
```


## Retinal Variables

::: {.columns}

::: {.column width="45%"}


The retinal variables are all those other graphical variables, that cannot be interpreted directly as a position on the screen's x and y.

The most important retinal variables are *colour hue, color value, shape, orientation, size, area, texture*. 

Each one has its own peculiarities and its own rules about how it can be used best.

:::

:::

## Colour

::: {.columns}

::: {.column width="45%"}

Colours can be mapped both to categorical and continuous variables.

With some caveats, colours are a multidimensional space:

- Not perceived in a fully linear way.
- Perceived in different ways by different people.

:::

:::

```{r}
#| include: false
#| eval: false
diamonds %>%
  ggplot() +
  aes(x = carat,
      y = price) +
  geom_bin_2d(binwidth = c(0.01, 50)) +
  scale_x_continuous(expand = expansion(0, 0),
                     limits = c(.2, .75)
                     ) +
  scale_y_continuous(expand = expansion(0, 0),
                     limits = c(0, 2500)
  ) +
  scale_fill_viridis_c(
    direction = -1,
    option = 'G'
  ) +
  guides(
    fill = guide_colourbar(barwidth = 20, barheight = 1)
  )

ggsave(filename = 'img/retinal-variables-colours-1-raw.png',
       width = 10,
       height = 12)
```

![](img/retinal-variables-colours-1.png){.absolute top=50 left=500}

## Color Spaces

::: {.columns}

::: {.column width="45%"}

If you find it hard to plan colours, don't worry, colours are complex for everyone.

On a screen, colours are **defined** as [three hexadecimal strings](https://duckduckgo.com/?q=color+picker), that combine 256 levels of red, green and blue.

:::

:::

![](img/color-hex.png){.absolute top=110 left=550}

## Color Spaces

::: {.columns}

::: {.column width="45%"}

Colors are perceived non linearly, and the model of how colors are perceived by people gets constantly updated. The most used model is [CIECAM02](https://en.wikipedia.org/wiki/CIECAM02).

What shoud interest you is:

- HUE: what we call colour.
- LIGHTNESS: how close to black?
- SATURATION: how close to gray?


:::

:::

![](img/hue-lightness-saturation.png){.absolute top=135 left=550}

## Categorical Variables

::: {.columns}

::: {.column width="45%"}

You can use colours to encode for categorical variables.

If the categorical variable is not ordered you should modulate the colors hue, with also small changes to saturation and lightness.

Always check if your colour palette is accessible by colour blind people.

:::

:::

```{r}
#| include: false
#| eval: false

library(palmerpenguins)
library(paletteer)

penguins %>% 
  ggplot() +
  aes(x = bill_length_mm,
      y = bill_depth_mm,
      colour = species) +
  geom_point(size  =4) +
  scale_color_paletteer_d("awtools::mpalette")

ggsave(filename = 'img/retinal-v-color-categorical-raw.png',
       width = 10,
       height = 11)
```

![](img/retinal-v-color-categorical.png){.absolute top=50 left=500 style="z-index: -1;"}

## Continous Variables

::: {.columns}

::: {.column width="45%"}

Using colours to encode continuous variables is somehow easier.

- Check that your colour palette is colour-blind friendly.
- Check that lightness and saturation change consistently with the data.
- You can modulate the hue resembling colours of natural phenomena; such as clouds, sunsets, rivers...

:::

:::

![](img/retinal-variables-colours-1.png){.absolute top=50 left=500 style="z-index: -1;"}

## Colour Perception

![](img/colour-blind-perception.png){.absolute top=100 left=0}

::: {.absolute left=0 bottom=70}

::: {.columns}

::: {.column width="49%"}

If you check that your palette are friendly to colour blind people, you can also detect unwanted patterns perception patterns.

:::

::: {.column width="45%"}

You can use [Firefox accessibility tools](https://firefox-source-docs.mozilla.org/devtools-user/accessibility_inspector/simulation/index.html) to simulate colour blind perception.

:::

:::

:::

## Good Colour Palettes

![](img/colour-palette-categorical.png){.absolute top=170 left=0}
![](img/colour-palette-continuous.png){.absolute top=170 left=485}

::: {.columns}

::: {.column width="45%"}
### Categorical

<br>

<br>

In categorical palettes, you should be able to distinguish colours, even in small plotting characters.

Check if colours are different, even when plotted in black and white. Otherwise consider using and additional graphical variable to encode the information.

:::

::: {.column width="45%"}
### Quantitative

<br>

<br>

Continuous colour palette should be perceived linearly and univocally throughout the spectra. Check that this is true also for color blindness and black and white.

Treat **ordered categorical variables** as if they were quantitative, not categorical.


:::

:::



## Colour

- colour ==> yes, use them, they make the graph nicer to see, you can encode continuous and categorica variables with them, with some caveat:

  - Daltonism or Colour blindness ==> Just test for it, use defined colour palettes.
  - Meanings associated to colours.
  - Perception. / lineaely percepted scales
  
colors are the on that can replace the x, y aesthetics out of the box, in a highly nuanced way.

## Colours, TO DO

- What is HUE, what is value?
- How to use HUE and value for qualitative and quantitative data.
- linear, divergent, cyclical colour scales.
- Daltonims, how to check for it.
- Digital colours and hexcodes.
- Colours in ggplot.
- Available colour palettes.

## Shape

Ok, also as double encoding, for printing etc.

## Size / Area, ok, how is it perceived?

Is it good for encoding uncertainty?

## Orientation

very specific

## Texture

cool for communication.


